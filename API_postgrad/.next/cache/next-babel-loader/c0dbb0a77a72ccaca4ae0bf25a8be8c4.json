{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/hackyourfuture/Desktop/next-learn-demo/6-fetching-data/pages/p/[id].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\n\nvar Film = function Film(props) {\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 3\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, props.film.title), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, props.film.description), __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }\n  }, \"PEOPLE\"), __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, props.film2.map(function (film) {\n    return __jsx(\"li\", {\n      key: film.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }\n    }, __jsx(\"h2\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 11\n      }\n    }, film.title), __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 11\n      }\n    }, \"Release Date: \", film.release_date), __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 11\n      }\n    }, \"Score: \", film.rt_score), __jsx(Link, {\n      href: \"/p/[id]\",\n      as: \"/p/\".concat(film.id),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 11\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }\n    }, \"More Info\")));\n  })));\n};\n\nFilm.getInitialProps = function _callee(context) {\n  var id, res, film, res2, actors;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          id = context.query.id;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"https://ghibliapi.herokuapp.com/films/\".concat(id)));\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          film = _context.sent;\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(fetch(film.people));\n\n        case 9:\n          res2 = _context.sent;\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(res2.json());\n\n        case 12:\n          actors = _context.sent;\n          console.log(film2); //console.log(`Fetched show: ${film.people}`);\n\n          return _context.abrupt(\"return\", {\n            film: film,\n            actors: actors\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Film;","map":{"version":3,"sources":["/Users/hackyourfuture/Desktop/next-learn-demo/6-fetching-data/pages/p/[id].js"],"names":["Layout","fetch","Film","props","film","title","description","film2","map","id","release_date","rt_score","getInitialProps","context","query","res","json","people","res2","actors","console","log"],"mappings":";;;;;;;AAAA,OAAOA,MAAP,MAAmB,2BAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK;AAAA,SAChB,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,KAAK,CAACC,IAAN,CAAWC,KAAhB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIF,KAAK,CAACC,IAAN,CAAWE,WAAf,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,KAAK,CAACI,KAAN,CAAYC,GAAZ,CAAgB,UAAAJ,IAAI;AAAA,WAEnB;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACK,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKL,IAAI,CAACC,KAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAmBD,IAAI,CAACM,YAAxB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAYN,IAAI,CAAEO,QAAlB,CAHF,EAIE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,EAAE,eAAQP,IAAI,CAACK,EAAb,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CAJF,CAFmB;AAAA,GAApB,CADH,CAJF,CADgB;AAAA,CAAlB;;AAsBAP,IAAI,CAACU,eAAL,GAAuB,iBAAeC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACbJ,UAAAA,EADa,GACNI,OAAO,CAACC,KADF,CACbL,EADa;AAAA;AAAA,2CAEHR,KAAK,iDAA0CQ,EAA1C,EAFF;;AAAA;AAEfM,UAAAA,GAFe;AAAA;AAAA,2CAGFA,GAAG,CAACC,IAAJ,EAHE;;AAAA;AAGfZ,UAAAA,IAHe;AAAA;AAAA,2CAIFH,KAAK,CAACG,IAAI,CAACa,MAAN,CAJH;;AAAA;AAIfC,UAAAA,IAJe;AAAA;AAAA,2CAKAA,IAAI,CAACF,IAAL,EALA;;AAAA;AAKfG,UAAAA,MALe;AAOrBC,UAAAA,OAAO,CAACC,GAAR,CAAYd,KAAZ,EAPqB,CAQrB;;AARqB,2CAUd;AAAEH,YAAAA,IAAI,EAAJA,IAAF;AAAOe,YAAAA,MAAM,EAANA;AAAP,WAVc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAaA,eAAejB,IAAf","sourcesContent":["import Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\n\nconst Film = props => (\n  <Layout>\n    <h1>{props.film.title}</h1>\n    <p>{props.film.description}</p>\n    <h1>PEOPLE</h1>\n    <ul>\n      {props.film2.map(film => (\n\n        <li key={film.id}>\n          <h2>{film.title}</h2>\n          <p>Release Date: { film.release_date}</p>\n          <p>Score: { film. rt_score}</p>\n          <Link href=\"/p/[id]\" as={`/p/${film.id}`}>\n            <a>More Info</a>\n          </Link>\n        </li>\n        \n      ))}\n    </ul>\n  </Layout>\n);\n\nFilm.getInitialProps = async function(context) {\n  const { id } = context.query;\n  const res = await fetch(`https://ghibliapi.herokuapp.com/films/${id}`);\n  const film = await res.json();\n  const res2 = await fetch(film.people);\n  const actors = await res2.json();\n  \n  console.log(film2);\n  //console.log(`Fetched show: ${film.people}`);\n\n  return { film,actors };\n};\n\nexport default Film;"]},"metadata":{},"sourceType":"module"}