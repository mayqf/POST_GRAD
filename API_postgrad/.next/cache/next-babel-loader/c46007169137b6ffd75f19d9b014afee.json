{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/hackyourfuture/Desktop/POST_GRAD/API_postgrad/pages/p/[id].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\nimport Search from '../../components/Search';\nimport { Card } from 'semantic-ui-react';\n\nvar Film = function Film(props) {\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 3\n    }\n  }, __jsx(Card, {\n    size: \"big\",\n    color: \"yellow\",\n    centered: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, __jsx(Card.Content, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, __jsx(Card.Header, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, props.film.title), __jsx(Card.Meta, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, __jsx(\"span\", {\n    className: \"date\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, props.film.producer)), __jsx(Card.Description, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, props.film.description))), __jsx(Search, {\n    locations: props.locationsNames,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }), __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, \"LOCATIONS\"), __jsx(Card.Group, {\n    stackable: true,\n    itemsPerRow: \"8\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, props.locations.map(function (location) {\n    return __jsx(Card, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 10\n      }\n    }, __jsx(Card.Content, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 10\n      }\n    }, __jsx(Link, {\n      href: \"/l/[id]\",\n      as: \"/l/\".concat(location.id),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 10\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    }, location.name))));\n  })));\n};\n\nFilm.getInitialProps = function _callee(context) {\n  var id, res, film, res2, locations, locationsNames;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          id = context.query.id;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"https://ghibliapi.herokuapp.com/films/\".concat(id)));\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          film = _context.sent;\n          console.log(film.locations);\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(fetch(film.locations));\n\n        case 10:\n          res2 = _context.sent;\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(res2.json());\n\n        case 13:\n          locations = _context.sent;\n          locationsNames = locations.map(function (item) {\n            return {\n              id: item.id,\n              name: item.name\n            };\n          });\n          return _context.abrupt(\"return\", {\n            film: film,\n            locations: locations,\n            locationsNames: locationsNames\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Film;","map":{"version":3,"sources":["/Users/hackyourfuture/Desktop/POST_GRAD/API_postgrad/pages/p/[id].js"],"names":["Layout","fetch","Link","Search","Card","Film","props","film","title","producer","description","locationsNames","locations","map","location","id","name","getInitialProps","context","query","res","json","console","log","res2","item"],"mappings":"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","sourcesContent":["import Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\nimport Search from '../../components/Search';\n\nimport { Card } from 'semantic-ui-react'\n\n\nconst Film = props => (\n  <Layout>\n    <Card size='big' color='yellow' centered>\n    <Card.Content>\n      <Card.Header>{props.film.title}</Card.Header>\n      <Card.Meta>\n        <span className='date'>{props.film.producer}</span>\n      </Card.Meta>\n      <Card.Description>\n      {props.film.description}\n      </Card.Description>\n    </Card.Content>\n  </Card>\n\n    <Search locations={props.locationsNames}/>\n    <h1 >LOCATIONS</h1>\n    <Card.Group stackable itemsPerRow='8' >\n       {props.locations.map(location=>(\n         <Card>\n         <Card.Content>\n         <Link href=\"/l/[id]\" as={`/l/${location.id}`}>\n            <a>{location.name}</a>\n          </Link>\n         </Card.Content>\n       </Card>\n       ))} \n     </Card.Group>\n  </Layout>\n);\n\nFilm.getInitialProps = async function(context) {\n  const { id } = context.query;\n  const res = await fetch(`https://ghibliapi.herokuapp.com/films/${id}`);\n  const film = await res.json();\n  console.log(film.locations);\n  const res2 = await fetch(film.locations);\n  const locations = await res2.json();\n  let locationsNames = locations.map(item =>({ id: item.id, name: item.name }))\n\n\n  return { film,locations,locationsNames };\n};\n\nexport default Film;"]},"metadata":{},"sourceType":"module"}